#efficient solution
from collections import defaultdict
t = int(input())

for test_cases in range(t):
    m, n = map(int,input().split())
    board = []
    upper_diagonal, lower_diagonal = defaultdict(int), defaultdict(int)
    maximal_attack = 0
    
    for r in range(m):
        row = list(map(int,input().split()))
        board.append(row)

    for row in range(m):
        for col in range(n):
            upper_diagonal[row-col] += board[row][col]
            lower_diagonal[row+col] += board[row][col]

    for row in range(m):
        for col in range(n):
            curr_square = board[row][col]
            curr_attacks = upper_diagonal[row-col] + lower_diagonal[row+col] - curr_square
            maximal_attack = max(maximal_attack,curr_attacks)

    print(maximal_attack)
    #brute force solution TLE on O(n2xm2)
    
def upLeft(row,col):
    summ=0
    while row>=0 and col>=0:
        summ+=grid[row][col]
        row-=1
        col-=1
    return summ
def upRight(row,col):
    summ=0
    while row>=0 and col<columns:
        summ+=grid[row][col]
        row-=1
        col+=1
    return summ
def downLeft(row,col):
    summ=0
    while row<rows and col>=0:
        summ+=grid[row][col]
        row+=1
        col-=1
    return summ
def downRight(row,col):
    summ=0
    while row<rows and col<columns:
        summ+=grid[row][col]
        row+=1
        col+=1
    return summ
t=int(input())
for _ in range(t):
    rows,columns=list(map(int,input().split()))
    grid=[]
    for _ in range(rows):
        grid.append(list(map(int,input().split())))
    maxSum=0
    for row in range(rows):
        for col in range(columns):
            curSum=upLeft(row,col)+downLeft(row,col)+upRight(row,col)+downRight(row,col)-3*(grid[row][col])
            maxSum=max(maxSum,curSum)
    print(maxSum)


    
