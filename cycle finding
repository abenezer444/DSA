class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def bellman_ford(self, src):
        distances = [float("inf")] * self.V
        parent = [-1] * self.V
        distances[src] = 0

        # Relax edges |V| - 1 times
        for _ in range(self.V - 1):
            for u, v, w in self.graph:
                if distances[u] != float("inf") and distances[u] + w < distances[v]:
                    distances[v] = distances[u] + w
                    parent[v] = u  # Update the parent

        # Detect negative weight cycles and trace them
        negative_cycle = None
        for u, v, w in self.graph:
            if distances[u] != float("inf") and distances[u] + w < distances[v]:
                negative_cycle = v  # Store any vertex in the negative cycle
                break

        if negative_cycle is not None:
            # Trace the negative cycle using the parent pointers
            cycle_nodes = []
            node = negative_cycle
            while node != -1 and node not in cycle_nodes:
                cycle_nodes.append(node)
                node = parent[node]

            # Print the nodes in the negative cycle
            print("Negative weight cycle detected:")
            print(" -> ".join(map(str, reversed(cycle_nodes))))
        else:
            # Print the shortest distances
            for i in range(self.V):
                print(f"Vertex {i} is at distance {distances[i]}")


# Example usage
g = Graph(5)
g.add_edge(0, 1, -1)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 3)
g.add_edge(1, 3, 2)
g.add_edge(1, 4, 2)
g.add_edge(3, 2, 5)
g.add_edge(3, 1, 1)
g.add_edge(4, 3, -3)

source_vertex = 0
g.bellman_ford(source_vertex)
