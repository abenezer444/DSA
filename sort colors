class Solution(object):
    def sortColors(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        #using buble sort inefficient code, O(n^2)
        for i in range(1,len(nums)):
            for j in range(i-1,-1,-1):
                if nums[j] > nums[j+1]:
                    nums[j],nums[j+1] = nums[j+1],nums[j]
                else: break
         #efficient code using partitioning technique, O(n)
 class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        left=0
        right=len(nums)-2
        for i in range(len(nums)):
            if nums[i]==1:
                pivot=nums[i]
                nums[i],nums[len(nums)-1]=nums[len(nums)-1],nums[i]
                while left<right:
                    while left<right and nums[left]<pivot:
                        left+=1
                    while left<right and nums[right]>=pivot:
                        right-=1
                    nums[left],nums[right]=nums[right],nums[left]
                if nums[left]>pivot:
                    nums[left],nums[len(nums)-1]=nums[len(nums)-1],nums[left]
                break
        left=0
        right=len(nums)-2
        for i in range(len(nums)):
            if nums[i]==2:
                pivot=nums[i]
                nums[i],nums[len(nums)-1]=nums[len(nums)-1],nums[i]
                while left<right:
                    while left<right and nums[left]<pivot:
                        left+=1
                    while left<right and nums[right]>=pivot:
                        right-=1
                    nums[left],nums[right]=nums[right],nums[left]
                if nums[left]>pivot:
                    nums[left],nums[len(nums)-1]=nums[len(nums)-1],nums[left]
                break
        
                    
                
                    
                    
                    
                    
                
              
                
                
