#O(n) solution using only one stack
class MyQueue(object):

    def __init__(self):
        self.queue1=[]
        

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.queue1.append(x)
        
        
    def pop(self):
        """
        :rtype: int
        """
        return self.queue1.pop(0)
        

    def peek(self):
        """
        :rtype: int
        """
        return self.queue1[0]
        

    def empty(self):
        """
        :rtype: bool
        """
        if self.queue1==[]:
            return True
        return False
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
#here is an amortized O(1) solution,where only the few cases result in O(n) time complexity
class MyQueue(object):

    def __init__(self):
        self.input=[]
        self.output=[]
        

    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.input.append(x)
        

    def pop(self):
        """
        :rtype: int
        """
        if self.output:
            return self.output.pop()
        elif self.input:
            while self.input:
                self.output.append(self.input.pop())
            return self.output.pop()
        

    def peek(self):
        """
        :rtype: int
        """
        if self.output:
            return self.output[-1]
        elif self.input:
            while self.input:
                self.output.append(self.input.pop())
            if self.output:
                return self.output[-1]
        
        

    def empty(self):
        """
        :rtype: bool
        """
        return not (self.output or self.input)
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
